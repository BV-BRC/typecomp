############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
# Passes on URLError, timeout, and BadStatusLine exceptions.
#     See: 
#     http://docs.python.org/2/library/urllib2.html
#     http://docs.python.org/2/library/httplib.html
#
############################################################

try:
    import json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as json
    
import urllib2, httplib, urlparse, random, base64, httplib2
from urllib2 import URLError, HTTPError
from os import environ

_CT = 'content-type'
_AJ = 'application/json'
_URL_SCHEME = frozenset(['http', 'https']) 

# This is bandaid helper function until we get a full
# KBase python auth client released
def _get_token( username, password,
               auth_svc="https://nexus.api.globusonline.org/goauth/token?grant_type=client_credentials"):
    h = httplib2.Http( disable_ssl_certificate_validation=True)
    
    auth = base64.encodestring( username + ':' + password )
    headers = { 'Authorization' : 'Basic ' + auth }
    
    h.add_credentials(username, password)
    h.follow_all_redirects = True
    url = auth_svc
    
    resp, content = h.request(url, 'GET', headers=headers)
    status = int(resp['status'])
    if status>=200 and status<=299:
        tok = json.loads(content)
    else: 
        raise Exception(str(resp))
        
    return tok['access_token']

# Another bandaid to read in the ~/.authrc file if one is present
def _read_rcfile( file=environ['HOME']+"/.authrc"):
    authdata = None
    if os.path.exists( file):
        try:
            with open( file ) as authrc:
                rawdata = json.load( authrc)
                # strip down whatever we read to only what is legit
                authdata = { x : rawdata.get(x) for x in ( 'user_id', 'auth_token',
                                                           'client_secret', 'keyfile',
                                                           'keyfile_passphrase','password')}
        except Exception, e:
            print "Error while reading authrc file %s: %s" % (file, e)
    return authdata

class ServerError(Exception):

    def __init__(self, name, code, message):
        self.name = name
        self.code = code
        self.message = message

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message
[% FOREACH module IN modules %]
class [% module.module_name %]:

    def __init__(self, url, timeout = 30 * 60, user_id=None, password=None, token=None):
        if url is None:
            raise ValueError('A url is required')
        scheme, _, _, _, _, _ = urlparse.urlparse(url)
        if scheme not in _URL_SCHEME:
            raise ValueError(url + " isn't a valid http url")
        self.url = url
        self.timeout = int(timeout)
        self.headers = dict()
        # token overrides user_id and password
        if token is not None:
            self.headers['AUTHORIZATION'] = token
        elif user_id is not None and password is not None:
            self.headers['AUTHORIZATION'] = _get_token( username = user_id, password=password)
        elif not ignore_authrc:
            authdata = _read_rcfile()
            if authdata is not None:
                user_id = authdata['user_id']
                password = authdata['password']
                token = authdata['token']
                # the rest of the stuff in authrc is not currently supported
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

[% FOREACH method IN module.methods -%]
    def [% method.name %](self, [% method.args %]):

        arg_hash = { 'method': '[% module.module_name %].[% method.name %]',
                     'params': [[% method.args %]],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash)
        try:
            request = urllib2.Request( self.url, body, self.headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                err = json.loads(h.read()) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... if it does 
                    raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
[% IF method.ret_count == 1 -%]
            return resp['result'][0]
[% ELSE -%]
            return resp['result']
[% END -%]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

[% END %]
[% END %]
