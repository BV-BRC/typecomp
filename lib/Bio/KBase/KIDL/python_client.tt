############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
# Passes on URLError, timeout, and BadStatusLine exceptions.
#     See: 
#     http://docs.python.org/2/library/urllib2.html
#     http://docs.python.org/2/library/httplib.html
#
############################################################

try:
    import json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as json
    
import urllib2, httplib
from urllib2 import URLError

class ServerError(Exception):

    def __init__(self, name, code, message):
        self.name = name
        self.code = code
        self.message = message

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message
[% FOREACH module IN modules %]
class [% module.module_name %]:

    def __init__(self, url, timeout = 30 * 60):
        if url != None:
            self.url = url
        self.timeout = int(timeout)
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

[% FOREACH method IN module.methods -%]
    def [% method.name %](self, [% method.args %]):

        arg_hash = { 'method': '[% module.module_name %].[% method.name %]',
                     'params': [[% method.args %]],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
[% IF method.ret_count == 1 -%]
            return resp['result'][0]
[% ELSE -%]
            return resp['result']
[% END -%]
        elif 'error' in resp:
            raise ServerError(**resp['error'])
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

[% END %]
[% END %]

        
