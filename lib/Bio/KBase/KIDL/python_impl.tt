#BEGIN_HEADER
[% module.py_module_header -%]
#END_HEADER

'''

[% 	specToPy.list = 'list';
	specToPy.tuple = 'list';
	specToPy.struct = 'dict';
	specToPy.mapping = 'dict';
	specToPy.int = 'int';
	specToPy.float = 'float';
	specToPy.string = 'basestring'; 
-%]
Module Name:
[% module.module_name %]

Module Description:
[% module.module_doc %]

'''
class [% module.module_name %]:

    def __init__(self, config): #config contains contents of config file in hash or 
                                #None if it couldn't be found
        #BEGIN_CONSTRUCTOR
[% module.py_module_constructor -%]
        #END_CONSTRUCTOR
        pass

[% FOREACH method IN module.methods -%]
[% SET paramlist = [];
   FOREACH p IN method.params;
       paramlist.push(p.name);
   END;
   SET retlist = [];
   FOREACH var IN method.returns;
       IF var.name == 'return';
           var.name = 'returnVal';
       END;
       retlist.push(var.name);
   END -%]
    def [% method.name %](self,  [% paramlist.join(', ') %] ):
        # self.ctx should be set by the wsgi application class
[% IF method.ret_count > 0 -%]
        # return variables are: [% retlist.join(", ") %]
[% END -%]
        #BEGIN [% method.name %]
[% method.py_user_code -%]
        #END [% method.name %]

        #At some point might do deeper type checking...
[% FOREACH ret IN method.returns -%]
[%    spectype = ret.baretype -%]
[%    type = specToPy.$spectype -%]
        if not isinstance([% ret.name %], [% type %]):
            raise ValueError('Method [% method.name %] return value [% ret.name %] is not type [% type %] as required.')
[% END -%]
[% IF method.ret_count > 0 %]
        # return the results
        return [ [% retlist.join(', ') %] ]
        
[% END -%]
[% END -%]